//
//  HomeInteractor.swift
//  Entertainya
//
//  Created by Karim Cordilia on 31/01/2021.
//  Copyright (c) 2021 Karim Cordilia. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.

import UIKit
import Moya
import RxSwift

protocol HomeInteractorProtocol {
    func handleViewDidLoad()
}

class HomeInteractor: HomeInteractorProtocol {
    
    // MARK: DI
    var presenter: HomePresenterProtocol
    let provider: MoyaProvider<MovieService>!
    let disposeBag = DisposeBag()
    let locale = Locale.current.regionCode
    
    init(presenter: HomePresenterProtocol,
         provider: MoyaProvider<MovieService>) {
        self.presenter = presenter
        self.provider = provider
    }
    
    func handleViewDidLoad() {
        getPopularMovies()
        getNowPlayingMovies()
        getTopRatedMovies()
        getUpcomingMovies()
    }
    
    
    func getPopularMovies() {
        provider.rx
            .request(.getPopularMovies)
            .filterSuccessfulStatusAndRedirectCodes()
            .map(Movies.self)
            .subscribe { [weak self] movies in
                self?.presenter.presentPopularMovies(movies: movies)
            } onError: { error in
                print(error)
            }.disposed(by: disposeBag)
        
    }
    
    func getNowPlayingMovies() {
        guard let region = locale else { return }
        provider.rx
            .request(.getNowPlayingMovies(region: region))
            .filterSuccessfulStatusCodes()
            .map(Movies.self)
            .subscribe { [weak self] movies in
                self?.presenter.presentNowPlayingMovies(movies: movies)
            } onError: { error in
                print(error)
            }.disposed(by: disposeBag)
    }
    
    func getTopRatedMovies() {
        guard let region = locale else { return }
        provider.rx
            .request(.getTopRatedMovies(region: region))
            .filterSuccessfulStatusCodes()
            .map(Movies.self)
            .subscribe { [weak self] movies in
                self?.presenter.presentTopRatedMovies(movies: movies)
            } onError: { error in
                print(error)
            }.disposed(by: disposeBag)
    }
    
    func getUpcomingMovies() {
        guard let region = locale else { return }
        provider.rx
            .request(.getUpcomingMovies(region: region))
            .filterSuccessfulStatusCodes()
            .map(Movies.self)
            .subscribe { [weak self] movies in
                self?.presenter.presentUpcomingMovies(movies: movies)
            } onError: { error in
                print(error)
            }.disposed(by: disposeBag)
    }
}
